package mountain;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;

import fractal.*;

public class Mountain3 extends Fractal {
	private Point a;
	private Point b;
	private Point c;
	private static double dev;
	private static ArrayList<Side> sidelist;

	public Mountain3() {
		super();
		a = new Point(100, 450);
		b = new Point(280, 50);
		c = new Point(500, 500);
		dev = 50;
		sidelist = new ArrayList<Side>();
	}

	public String getTitle() {
		return "Perfect Mountain";
	}

	public void draw(TurtleGraphics turtle) {
		fractalLine(turtle, order, a, b, c, dev);
	}

	public Point getMiddle(Point a, Point b, double dev) {
		Point midpoint = null;
		for (int i = 0; i < sidelist.size(); i++) {
			Side s = sidelist.get(i);
			if (s.Point1.equals(a) && s.Point2.equals(b) || s.Point1.equals(b)
					&& s.Point2.equals(a)) {
				midpoint = s.midpoint;
				sidelist.remove(s);
			}
		}
		if (midpoint == null) {
			double midX = (a.getX() + b.getX()) / 2;
			double midY = (a.getY() + b.getY()) / 2
					+ RandomUtilities.randFunc(dev);
			midpoint = new Point(midX, midY);
			sidelist.add(new Side(a, b, midpoint));
		}
		return midpoint;
	}

	private void fractalLine(TurtleGraphics turtle, int order, Point Point1,
			Point Point2, Point Point3, double rand) {
		if (order == 0) {
			turtle.moveTo(Point1.getX(), Point1.getY());
			turtle.forwardTo(Point2.getX(), Point2.getY());
			turtle.forwardTo(Point3.getX(), Point3.getY());
			turtle.forwardTo(Point1.getX(), Point1.getY());
		} else {
			Point m12 = getMiddle(Point1, Point2, rand);
			Point m23 = getMiddle(Point2, Point3, rand);
			Point m31 = getMiddle(Point3, Point1, rand);
			rand = rand / 2;
			fractalLine(turtle, order - 1, m12, m23, m31, rand);
			fractalLine(turtle, order - 1, Point1, m12, m31, rand);
			fractalLine(turtle, order - 1, m12, Point2, m23, rand);
			fractalLine(turtle, order - 1, m31, m23, Point3, rand);
		}
	}
}
